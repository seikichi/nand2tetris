// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buf;
    field int current, max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let buf = 0;
            let current = 0;
            let max = 0;
            return this;
        }
        let buf = Memory.alloc(maxLength);
        let current = 0;
        let max = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(buf = 0)) {
          do buf.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return current;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buf[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let buf[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let buf[current] = c;
        let current = current + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (current > 0) {
            let current = current - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, d, v;
        var char c;
        var bool neg, cont;
        if (buf[i] = 45) { // '-'
            let i = i + 1;
            let neg = true;
        }
        let cont = true;
        while ((i < current) & cont) {
            let c = buf[i];
            if (c < 48 | 57 < c) {
                let cont = false;
            } else {
                let d = c - 48; // '0'
                let v = v * 10 + d;
            }
            let i = i + 1;
        }
        if (neg) {
            let v = -v;
        }
        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int last, n;
        var char c;
        var bool neg;

        if (val < 0) {
            let n = -val;
            let neg = true;
        } else {
            let n = val;
        }

        let last = n - (10 * (n / 10));
        let c = last + 48; // '0';
        if (n < 10) {
            if (neg) {
                let buf[0] = 45; // '-'
                let buf[1] = c;
                let current = 2;
                return;
            } else {
                let buf[0] = c;
                let current = 1;
                return;
            }
        } else {
            do setInt(val / 10);
            do appendChar(c);
            return;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
